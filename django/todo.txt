1. Чтобы создать новый проект на джанго, в терминале вводим команду - django-admin startproject romansite, где
romansite - название проекта
2. Переходим в терминале в папку с проектом и вводим команду - python manage.py runserver, она позволяет запустить
локальный сервер
3. После завершения работы всегда выходим с локального сервера. Для этого нажимаем CTRL+C
4. Для работы сайта нужно создавать разделы. Должен быть хотя бы один раздел, вводим команду -
python manage.py startapp main. Создалось приложение/раздел. Чем больше приложений в проекте, тем разграниченней наш
сайт по разделам, больше порядка
5. Заходим в проект, главный файл настроек, ищем INSTALLED_APPS и прописываем в список новое приложение - обязательная
регистрация каждого нового приложения
6. В файле romansite.py прописываем путь к главному приложению и к файлу urls.py, где ссылаемся на файл main/views.py, в
 котором прописана функция
7. Прописываем функцию в файле views для вывода текста на главной странице - проверка работоспособности
8. Внутри нашего приложения main мы создаем папку для шаблонов html страниц. Название должно быть строго - templates.
Внутри этой папки мы создаем еще одну обязательную папку и называем ее, как название нашего приложения - main. Внутри
создаем html файл
9. Подключаем html шаблон к нашей главной странице прописывая функцию в файле views, используя класс render()
10. Создаем файл-шаблон, где будет указан весь повторяющийся код из html файлов - layout.html

11. Используем jinja. Так как у нас меняется заголовок и блок body, мы прописываем код для динамического кода(в
отдельных файлах код здесь будет меняться):
    {% block content %}  - начало блока и его название
    {% endblock %}  - закрытие блока

12. Мы можем подключать файлы через include - {% include 'main/test.html' %}. Для этого не нужно много усилий,
подключение с помощью jinja

13. Подключаем стили bootstrapCDN в хедер нашего главного html шаблона layout, он будет действовать для всех страниц:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">

14. В файле layout.html подключаем к работе все статические файлы - {% load static %}

15. Создаем папку static для хранения папок js, img, css. Через jinja обращаемся к файлу через static в файле layout
.html, подключая локальный файл стилей main.css:
<link rel="stylesheet" href="{% static main/css/main.css %}">

16. Добавляем STATICFILES_DIRS для корректной работы локального файла .css
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

17. В файл main/urls.py импортируем:
from django.conf import settings
from django.conf.urls.static import static

и подключаем к патернам:
+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

Это поможет локальному файлу со стилями заработать в нашем проекте

18. Делаем структуру html, добавляем aside и main теги для разграничения панели меню и основного тела страницы
19. Подключили картинку, создали заголовок, создали нумерованный список в боковой панели меню, подключил класс для
заголовка. Подключили ссылку для отображения иконок в коде html. Вставили скопированный код иконок с сайта awesomeCDN
20. Прописываем стили для меню, для картинки-логотипа, для ссылок, псевдоклассы для наведения на ссылки
21. Добавляем имена для ссылок в файле main/urls.py + добавляем jinja ссылки для пунктов меню {% url 'home' %} +
добавляем функцию в файле views.py для перехода на страницу с контактами
22. Добавление стилей для динамичного блока main и его содержания. Добавление текста и кнопок на остальные страницы
сайта

23. Передача данны в html код. В файле views.py, в функции третим параметром мы передаем словарь, в котором указываем
ключ и значение: return render(request, 'main/space.html', {'title': 'Space'})
Затем переходим в html файл страницы, и по ключу мы можем передать значение в двойных фигурных скобках: {{ title }}

23.1 можно преобразовать код и в методе просто указать отдельно словарь, а третим параметром прописываем название
словаря:

def space(request):

data = {
    'title': 'Space',
    'values': ['123', 'name', 'car']
}
return render(request, 'main/space.html', data)

24. В нашем файле страницы html мы можем перебрать массив, который у нас прописан в словаре: для этого с помощью jinja
создаем команду, используя цикл и выводим элементы (i) по одному. В конце не забываем закрыть код цикла:

{% for i in elements %}
    <p>{{ i }}</p>
{% endfor %}

25. Мы также можем добавить в наш словарь еще один словарь:

data = {
    'title': 'Space',
    'values': ['123', 'name', 'car'],
    'elements': ['microsoft', 'apple', 'facebook'],
    'colors': {
        'green': 'tree',
        'yellow': 'sun',
        'black': 'night',
    }
}

Можем выводить его в файле html в виде словаря: {{ colors }}
Можем вывести один конкретный элемент: {{ colors.black }}
Можем перебрать циклом for:

{% for j in colors %}
    <p>{{ j }}</p>
{% endfor %}

26. Можно прописывать условия в шаблонизаторе jinja, не забываем закрывать условие:

{% for i in elements %}
    {% if i == 'apple' %}
        <p>{{ i }}</p>
    {% endif %}
{% endfor %}

27.



