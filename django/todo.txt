1. Чтобы создать новый проект на джанго, в терминале вводим команду - django-admin startproject romansite, где
romansite - название проекта
2. Переходим в терминале в папку с проектом и вводим команду - python manage.py runserver, она позволяет запустить
локальный сервер
3. После завершения работы всегда выходим с локального сервера. Для этого нажимаем CTRL+C
4. Для работы сайта нужно создавать разделы. Должен быть хотя бы один раздел, вводим команду -
python manage.py startapp main. Создалось приложение/раздел. Чем больше приложений в проекте, тем разграниченней наш
сайт по разделам, больше порядка
5. Заходим в проект, главный файл настроек, ищем INSTALLED_APPS и прописываем в список новое приложение - обязательная
регистрация каждого нового приложения
6. В файле romansite.py прописываем путь к главному приложению и к файлу urls.py, где ссылаемся на файл main/views.py, в
 котором прописана функция
7. Прописываем функцию в файле views для вывода текста на главной странице - проверка работоспособности
8. Внутри нашего приложения main мы создаем папку для шаблонов html страниц. Название должно быть строго - templates.
Внутри этой папки мы создаем еще одну обязательную папку и называем ее, как название нашего приложения - main. Внутри
создаем html файл
9. Подключаем html шаблон к нашей главной странице прописывая функцию в файле views, используя класс render()
10. Создаем файл-шаблон, где будет указан весь повторяющийся код из html файлов - layout.html

11. Используем jinja. Так как у нас меняется заголовок и блок body, мы прописываем код для динамического кода(в
отдельных файлах код здесь будет меняться):
    {% block content %}  - начало блока и его название
    {% endblock %}  - закрытие блока

12. Мы можем подключать файлы через include - {% include 'main/test.html' %}. Для этого не нужно много усилий,
подключение с помощью jinja

13. Подключаем стили bootstrapCDN в хедер нашего главного html шаблона layout, он будет действовать для всех страниц:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">

14. В файле layout.html подключаем к работе все статические файлы - {% load static %}

15. Создаем папку static для хранения папок js, img, css. Через jinja обращаемся к файлу через static в файле layout
.html, подключая локальный файл стилей main.css:
<link rel="stylesheet" href="{% static main/css/main.css %}">

16. Добавляем STATICFILES_DIRS для корректной работы локального файла .css
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

17. В файл main/urls.py импортируем:
from django.conf import settings
from django.conf.urls.static import static

и подключаем к патернам:
+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

Это поможет локальному файлу со стилями заработать в нашем проекте

18. Делаем структуру html, добавляем aside и main теги для разграничения панели меню и основного тела страницы
19. Подключили картинку, создали заголовок, создали нумерованный список в боковой панели меню, подключил класс для
заголовка. Подключили ссылку для отображения иконок в коде html. Вставили скопированный код иконок с сайта awesomeCDN
20. Прописываем стили для меню, для картинки-логотипа, для ссылок, псевдоклассы для наведения на ссылки
21. Добавляем имена для ссылок в файле main/urls.py + добавляем jinja ссылки для пунктов меню {% url 'home' %} +
добавляем функцию в файле views.py для перехода на страницу с контактами
22. Добавление стилей для динамичного блока main и его содержания. Добавление текста и кнопок на остальные страницы
сайта

23. Передача данны в html код. В файле views.py, в функции третим параметром мы передаем словарь, в котором указываем
ключ и значение: return render(request, 'main/space.html', {'title': 'Space'})
Затем переходим в html файл страницы, и по ключу мы можем передать значение в двойных фигурных скобках: {{ title }}

23.1 можно преобразовать код и в методе просто указать отдельно словарь, а третим параметром прописываем название
словаря:

def space(request):

data = {
    'title': 'Space',
    'values': ['123', 'name', 'car']
}
return render(request, 'main/space.html', data)

24. В нашем файле страницы html мы можем перебрать массив, который у нас прописан в словаре: для этого с помощью jinja
создаем команду, используя цикл и выводим элементы (i) по одному. В конце не забываем закрыть код цикла:

{% for i in elements %}
    <p>{{ i }}</p>
{% endfor %}

25. Мы также можем добавить в наш словарь еще один словарь:

data = {
    'title': 'Space',
    'values': ['123', 'name', 'car'],
    'elements': ['microsoft', 'apple', 'facebook'],
    'colors': {
        'green': 'tree',
        'yellow': 'sun',
        'black': 'night',
    }
}

Можем выводить его в файле html в виде словаря: {{ colors }}
Можем вывести один конкретный элемент: {{ colors.black }}
Можем перебрать циклом for:

{% for j in colors %}
    <p>{{ j }}</p>
{% endfor %}

26. Можно прописывать условия в шаблонизаторе jinja, не забываем закрывать условие:

{% for i in elements %}
    {% if i == 'apple' %}
        <p>{{ i }}</p>
    {% endif %}
{% endfor %}

27. Можно использовать фильтры (upper, lower etc):

{% for i in elements %}
    {% if i == 'microsoft' %}
        {% filter upper %}
            <p>{{ i }}</p>
        {% endfilter %}
    {% endif %}
{% endfor %}

Или есть другой способ:

{% for i in elements %}  <!-- используем фильтр - другой способ-->
    {% if i == 'facebook' %}
        <p>{{ i|upper }}</p>
    {% endif %}
{% endfor %}

28. Создаем новое приложение: python manage.py startapp news, для вывода новостей на нашем сайте. Регистрируем его в
основном файле настроек: settings.py
29. В основном файле urls прописываем путь, который будет относиться ко всем файлам приложения news:
path('news/', include('news.urls'))

30. Создаем файл urls.py в нашем приложении news и копируем туда код из другого приложения urls. Здесь мы прописываем
путь на страницу

31. Создаем базу данных в файле news/models.py. Прописываем класс: class Article(models.Model), теперь нам нужно
выделить названия столбцов в отдельные переменные, указав типы данных и характеристики при необходимости:

title = models.CharField('Title',  max_lenght=50)
anons = models.CharField('Notification',  max_lenght=250)
full_text = models.TextField('Article')
date = models.DateTimeField('Дата публикации')

32. Также в классе мы прописываем магический метод __str__

33. Проведение миграций. После создание таблицы в базе данных нужно провести миграции, для этого мы заходим в главную
папку в терминале и вводим команду: python manage.py makemigrations - создается файл миграций.
Теперь мы проводим сами миграции: python manage.py migrate

34. Панель администратора /admin. Поменял в главном файле настроек язык на русский - LANGUAGE_CODE = 'en-us', заменил на
 LANGUAGE_CODE = 'ru'

35. В панели администратора создаем нового админа: python manage.py createsuperuser
Вводим имя, почта по желанию, пароль

36. Наша таблица Article не отображается в панели администратора, потому что она там не зарегистрирована. Для этого
заходим в файл news/admin.py и прописываем:

from .models import Article

admin.site.register(Article)

37. Чтобы в панели администратора корректно отображалось название нашей таблицы данных, добавляем класс Meta, где
указываем название в единственном числе и во множественном

38. Чтобы вывести таблицу с новостями мы дописываем функцию в файле views.py, импортируем таблицу, создаем переменную,
включающую все объекты и передаем ее в виде ключ: значение

39. Прописываем код в файле news/news_home.html для вывода новостей из таблицы Article на сайт:

{% for element in news %}
    <div class="alert alert warning">
        <h3> {{ element.title }} </h3>
        <p> {{ element.notification }}</p>
    </div>
{% endfor %}

40. Прописал стиль для корректного отображения статей на сайте

41. В файле news/views.py можно использовать сортировку статей. Выбирается только один вариант

    news = Article.objects.all() - все данные
    news = Article.objects.order_by('-title') -сортировка по возрастанию
    news = Article.objects.order_by('title') - сортировка по убыванию
    news = Article.objects.order_by('-date') [:2] - сортировка по дате публикации, срезом указываем количество статей

42. В файле news/news_home.html прописали условие на случай, если записей нет.

    {% if news %}
        {% for el in news %}
            <div class="alert alert-warning">
                <h3>{{ el.title }}</h3>
                <p>{{ el.full_text }}</p>
            </div>
        {% endfor %}
    {% else %}
        <p> У вас нет записей! </p>
    {% endif %}

43. В шаблонизаторе jinja можно добавлять комментарии {# текст #}

44. Добавил кнопку в меню сайта в файле layout.html. С ее помощью можно будет добавлять статью на сайт. Прописываем
ссылку через jinja:

<a href="{% url 'create' %}"><li><button class="btn btn-info"><i class="fas fa-plus-circle"></i> Add post </button></li></a>

45. Создал новую страницу шаблон html, прописал функцию в файле news/views.py, создал ссылку в файле news/urls.py.

46. В шаблоне news/create.html прописываем поля для ввода данных - название, заголовок, поле для текста, дата
добавления, время добавления + кнопка

47. Прописываем стиль оформления страницы с формой добавления статей в базу данных.
48. {% csrf_token %} В форму добавляем токен безопасной передачи данных, копируем со страницы с ошибкой

49. Чтобы связать нашу страницу с формой добавления статьи в базу данных, нам нужно создать новый файл news/form.py. В
нем описываем класс самой формы, определяем модель и обозначаем нужные нам поля:

from .models import Article
from django.forms import ModelForms

class ArticleForm(ModelForms):
    class Meta:
        model = Article
        fields = ['title', 'anons', 'full_text', 'date']

50. В файле news/views.py создаем объект form класса ArticleForm(), создаем словарь, указываем элемент 'form':
form и передаем его в наш return:

def create(request):
    form = ArticleForm()
    date = {
        'form': form,
    }
    return render (request, 'news/create.html', date)

51. Передаем наш объект в файл create.html в нашу форму для вывода на сайте {{ form }}

52. Прописываем виджеты для нашей формы в файле forms.py

        widgets = {
            'title': TextInput({
                'class': 'form-control',
                'placeholder': "Article's name"
            }),
            'anons': TextInput({
                'class': 'form-control',
                'placeholder': "Article's notification"
            }),
            'full_text': Textarea({
                'class': 'form-control',
                'placeholder': "Atricle's text"
            }),
            'date': DateTimeInput({
                'class': 'form-control',
                'placeholder': "Date of public"
            }),
        }

53. Удаляем из шаблона create.py ненужные поля формы:

<input type="text" placeholder="Article's name" class="form-control"><br>  <!-- название -->
<input type="text" placeholder="Article's notification" class="form-control"><br>  <!-- заголовок -->
<textarea class="form-control" placeholder="Atricle's text"></textarea><br>  <!-- текст -->
<input type="date" class="form-control"><br>  <!-- выбор даты -->
<input type="time" class="form-control"><br>  <!-- выбор времени -->

54. В файле news/views.py дописываем метод create. Пишем условие сохранения данных из формы в БД. Проверка данных на
корректность и переадресация на другую страницу

def create(request):
    error = ''
    if request.method == 'POST':
        form = ArticleForm(request.POST)
        if form.is_valid():
            form.save()
        else:
            error = 'Form is uncorrected'

    form = ArticleForm()

    date = {  # 3.4 создание словаря, куда передаем объект класса
        'form': form,
        'error': error  # 4.7 добавляем текст ошибки
    }
    return render (request, 'news/create.html', date)

55. В шаблоне news/create.html прописываем блок для вывода ошибки, если форма заполнена неверно: {{ error }} +
прописываем в методе путь переадресации на страницу с новости. Данные добавляются в БД и сразу выводятся на экран. Дату
 нужно заполнять в формате: 2024-05-25 19:45

56. Создаем новый класс в файле views.py для создания динамически меняющейся страницы:

from .django.views.generic import DetailView

class NewDetailView(DetailView):
    model = Article
    template_name = 'news/details_view.html'
    context_object_name = 'article'

57. В файле news/urls.py прописываем новый путь для динамической страницы:
path('<int:pk>', views.NewsDetailView.as_view(), name='news-detail')

Указываем ссылку на динамически изменяемую ссылку, даем ей имя 'pk', обращаемся не к функции, а к новому классу и
вызываем встроенный метод .as_view(), без него ничего не получится + присваиваем имя: name='news-detail'

58. Создаем новый шаблон для динамической страницы со статьями: news/templates/news/details_view.html

59. Прописываем в файле с шаблоном news_home.html ссылку для открытия статьи на новой динамической странице

<a href="{% url 'news-detail' el.id %}" class="btn btn-warning">Tap for more</a>

Указываем ссылку для перехода через шаблонизатор, также включаем id новости, оно будет отображаться в поисковой строке

60. Также прописываем ссылку на динамической странице с отдельной статьей для возврата обратно на главную страницу с
новостями

<a href="{% url 'news_home' %}" class="btn btn-warning">Come back</a>

61. Изменили название динамической страницы в зависимости от открываемой статьи: {{ article.title }}

62. В файле news/urls.py прописываем ссылку на страницу для обновления статьи
path('<int:pk>/update', views.NewsUpdateView.as_view(), name='news-update')

63. В файле news/views.py импортируем класс UpdateView и создаем новый класс для обновления статьи в БД
class NewsUpdateView(UpdateView):
    model = Article
    template_name = 'news/create.html'
    fields = ['title', 'anons', 'full_text', 'date']
