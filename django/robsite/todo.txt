1. django-admin startproject robsite - создание проекта с его названием
2. python manage.py runserver - запуск сервера
3. python manage.py startapp dogs - создание нового приложения с его названием

--------------------------------------------
4. Динамические страницы:
- в файле dogs/urls.py прописываем путь на динамическую страницу по целому числу - /<int:cat_id>/ - без пробела
path('cats/<int: cats_id>/', views.categories)

- в файле dogs/views.py добавляем второй аргумент - cat_id и передаем его в return. При вводе числа в поисковой строке
будет открываться новая страница, соответствующая введенному числу

def categories(request, cat_id):
    return HttpResponse(f'<h1>Статьи по категориям</h1> <p>id: {cat_id}</p>')

- документация по типам маршрута (PATH CONVERTERS):
    https://docs.djangoproject.com/en/4.2/topics/http/urls/

- можно делать страницу не /<int:cat_id>/, по целому числу, а по любым символам - /<slug:cat_slug>/

- если конвертеров не хватает можно прописать путь через использование регулярных выражений - re_path. Импортируем
re_path прописываем путь (и не забываем прописать функцию archive в файле dogs/views.py:

re_path(r'^archive/(?P<year>[0-9]{4})/', views.archive)

- можно регулярные выражения преобразовывать через конвертер (специальный класс, который мы создаем, где описываем все
преобразования нашего регулярного выражения). Создаем новый файл для конвертеров dogs/converters.py, там прописываем
класс конвертера со всеми параметрами - FourDigitYearConverter. В файле dogs/urls.py импортируем регистратор
конвертеров: register_converter. Импортируем сам файл converters.py: from . import converters. После этого прописываем
строку регистрации конвертера с указанием названия: register_converter(converters.FourDigitYearConverter, 'year4').
Затем изменяем путь регулярного выражения на обычный путь: path('archive/<year4:year>/', views.archive). Сама функция в
файле dogs/views.py остается неизменной

--------------------------------------------
5. Существуют GET и POST запросы. Если мы добавим вывод GET запроса в нашу функцию:
def categories_by_slug(request, cat_slug):
    print(request.GET)
    return HttpResponse(f'<h1>Статьи по категориям</h1> <p>slug: {cat_slug}</p>')
А в браузере введем запрос: http://127.0.0.1:8000/cats/music/?name=Robert&age=2, то в терминале мы увидим словарь:
<QueryDict: {'name': ['Robert'], 'age': ['2']}>

--------------------------------------------
6. Мы можем в настройках проекта settings.py установить значение - DEBUG = False. Тогда нам нужно написать страницу,
которая будет отображаться если искомая страница не будет найдена. Действует вместо - Page not found 404. также мы
должны указать хост, который используем, чтобы можно было перейти на сайт - ALLOWED_HOSTS = ['127.0.0.1']

- мы можем обработать это исключение, и у нас будет выдаваться на страницу с ошибкой та надпись или тот материал,
которые мы зададим. Для этого в файле urls.py создаем специальный обработчик - handler404 = page_not_found

- далее прописываем функцию в файле dogs/views.py:
def page_not_found(request, exception):
    return HttpResponseNotFound('<h1>Страница не найдена =(</h1>')

- в файле urls.py импортируем созданную функцию для обработчика - from dogs.views import page_not_found

- мы можем импортировать Http404() и вызвать исключение в функции перехода на страницу. Пишем проверку и само
исключение, тогда нас перекинет на созданную нами ранее страницу, которая скажет, что такой страницы не существует:

def archive(request, year):
    if year > 2024:
        raise Http404()
    return HttpResponse(f'<h1>Архив по годам</h1> <p>{year}</p>')

--------------------------------------------
7. Мы можем сделать перенаправление на нужную нам страницу. Пишем условие в функции в файле dogs/views.py, импортируем
redirect:

def archive(request, year):
    if year > 3000:
        raise Http404()
    elif year > 2024:
        return redirect(index)
    return HttpResponse(f'<h1>Архив по годам</h1> <p>{year}</p>')

- в качестве параметров redirect мы можем:
. указать url-ссылку '/' - главная страница
. прописать название функции, к примеру - index
. написать название страницы - name, которое у нас указано в файле urls.py

- Все прошлые манипуляции делают перенаправление на постоянную страницу с кодом 302, а если нам нужно перенаправление на
 временную страницу с кодом 301, то мы можем прописать так:
elif year > 2024:
    return redirect('/', permanent=True)

--------------------------------------------
8. Добавил имена всем нашим маршрутам в файле dogs/urls.py

--------------------------------------------
9. Подключение шаблонов
- в файле dogs/views.py импортируем - from django.template.loader import render_to_string
После этого в приложении dogs создаем папку templates, а в ней файл index.html, это будет шаблон для главной страницы.
Далее меняем функцию на подключение шаблона:
def index(request):
    text = render_to_string('index.html')
    return HttpResponse(text)

- лучше писать более короткий путь
def index(request):
    return render (request, 'dogs/index.html')

--------------------------------------------
10. Создали и подключили новый файл about.py

--------------------------------------------
11. Мы создали словарь в функции для главной страницы index, добавив его в 3ий параметр вывода + изменили 3ий параметр в
 функции about

- в самих шаблонах мы прописали с помощью шаблонизатора - {{ title }}

- мы можем передать яерез шаблонизатор множество различных типов данных. А если нужно передать определенный аргумент, то
 записываем его через точку - <p>{{ list.1 }}</p>

--------------------------------------------
12. Создал новую страницу space.html, в которой прописал все типы данных и показал, как можно обращаться к аргументам у
того или иного типа данных

--------------------------------------------
13. Используем фильтры:

add - <p>{{ float|add:'50' }}</p> - округляет число с точкой
capfirst - <h1>{{ title|capfirst }}</h1> - преобразует первую букву в заглавную
upper - <h1>{{ title|upper }}</h1> - преобразует все буквы в заглавные
lower - <h1>{{ title|lower }}</h1> - преобразует все буквы в строчные
cut - <h1>{{ title|cut:' ' }}</h1> - удаляет указанные символы - все пробелы
cut - <h1>{{ title|cut:' '|cut:'?' }}</h1> - удаляет указанные символы - все пробелы и все знаки вопросов
default - <title>{{ main_title|default:'Без заголовка' }}</title> - если нет такой переменной, подставит новое значение
divisibleby - <p>{{ float|divisibleby:'2' }}</p> - проверяет на кратность указанному числу, преобразует в целое число
join - p>{{ menu|join:' | ' }}</p> - добавляет разделитель между элементами коллекции
first - <p>{{ menu|first }}</p> - выводит первый элемент коллекции
last - <p>{{ menu|last }}</p> - выводит последний элемент коллекции
length - <p>{{ list|length }}</p> - определяет длину
slugify - <p>{{ 'The Main Page'|slugify }}</p> - создает слаг, нижний регистр, пробелы меняет на тире

Фильтры можно использовать не только в шаблонах, но и напрямую в python файлах:
- импортируем - from django.template.defaultfilters import slugify

--------------------------------------------
14. Создали список словарей и подключили его к функции для главной странице. В шаблоне главной страницы прописали цикл
переборки словарей и вывод их на экран в виде маркированного списка:

<ul>
    {% for i in posts %}
    <li>
        <h2>{{ i.title }}</h2>
        <p>{{ i.content }}</p>
        <hr>
    </li>
    {% endfor %}
</ul>

- Добавили условие if, что посты из словаря выводятся только если значение is_published == True:

<ul>
    {% for i in posts %}
        {% if i.is_published == True %}
            <li>
                <h2>{{ i.title }}</h2>
                <p>{{ i.content }}</p>
                <hr>
            </li>
        {% endif %}
    {% endfor %}
</ul>

- Добавили условие для вывода черты после поста, если пост не последний, тогда ее выводим, если последний в списке,
черта не напечатается

{% if not forloop.last %}
<hr>
{% endif %}

--------------------------------------------
15. В шаблоне главной страницы мы подключили ссылку на прочтение статьи, выборка по id
<p><a href="posts/{{ i.id }}"> Читать статью </a></p>

После этого делаем динамические страницы логичнее:

- в файле dogs/urls.py прописываем путь
path('post/<int:post_id>/', views.show_post, name='post'),

- в файле dogs/views.py прописываем функцию:
def show_post(request, post_id):
    return HttpResponseNotFound(f"Отображение статьи с id = {post_id}")

- в шаблоне главной страницы прописываем ссылку по другому:
<p><a href="{% url 'post' i.id %}"> Читать статью </a></p>

--------------------------------------------
16. Добавление путей на страницы - добавление статьи, контакты, вход:
path('addpage/', views.addpage, name='addpage'),
path('contacts/', views.contacts, name='contacts'),
path('login/', views.login, name='login'),

- Добавление функций для этих путей:

def addpage(request):
    return HttpResponse('Добавление статьи')

def contacts(request):
    return HttpResponse('Контакты')

def login(request):
    return HttpResponse('Вход')

--------------------------------------------
17. Изменили список меню на список со словарями для пунктов меню:
menu = [
    {'title': 'О сайте', 'page_name': 'about'},
    {'title': 'Добавить статью', 'page_name': 'addpage'},
    {'title': 'Обратная связь', 'page_name': 'contacts'},
    {'title': 'Войти', 'page_name': 'login'},
]

- Это поможет нам в шаблоне главной страницы подключить ссылки на страницы с помощью цикла for:
<ul>
    <li><a href="{% url 'home' %}"> {{ title }} </a></li>
    {% for j in menu %}
    <li>
        <p><a href="{% url j.page_name %}"> {{ j.title }} </a></p>
    </li>
    {% endfor %}
</ul>

--------------------------------------------
18. Создали базовый шаблон для всех страниц, из него будет производиться наследование в другие шаблоны base.html. Так
как путь у нас в корневой папке, и он не стандартный, то нам нужно зайти в главные настройки и прописать доп путь в
TEMPLATES - DIRS, ПИШЕМ - BASE_DIR / 'templates':

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ]
        .......

--------------------------------------------
19. В файле base.html мы прописываем весь html код и выделяем место, которое у нас будет динамичным так:
{% block content %} ... {% endblock %}

- а в файле страницы, где был шаблон мы пишем так:

{% extends 'base.html' %}  - указываем основной шаблон

{% block content %}
    .... - здесь вставляем наш код для этой страницы
{% endblock %}

--------------------------------------------
20. Создаем новый шаблон в приложении dogs и подключаем его на главной странице сайта через include:
{% include 'dogs/includes/nav.html' %} - прописываем внутри {% block content %}

--------------------------------------------
21. Создаем структуру для статических файлов. Открываем папку с приложением dogs, в нем создаем папку static, далее
создаем папку с названием самого приложения - dogs, и в ней создаем еще 3 папки - css, js, images. Сразу создаем файл
для стилей - styles.css

--------------------------------------------
22. В файле base.html - главный шаблон, подключаем статические файлы:
{% load static %}

--------------------------------------------
23. Изменили в главном файле настроек сайта параметр - DEBUG = True, без него файл стилей не подключится

- Мы подключаем к нашему базовому шаблону файл со стилями:
<link type="text/css" href="{% static 'dogs/css/styles.css' %}" rel="stylesheet" />

- В файле стилей прописываем простой код css для проверки работоспособности файла

--------------------------------------------
24. Если мы хотим сделать картинку кнопкой с о ссылкой, то можем использовать форму:
<form action="https://www.youtube.com/" target="_blank">
    <button ><img src="{% static 'dogs/images/youtube.svg' %}" alt="logo" class="youtube_logo"></button>
</form>

- target="_blank" - позволяет открывать ссылку в новой вкладке браузера

--------------------------------------------
25. Можно с помощью фильтра показать, сколько слов нужно выводить из статьи на страницу:
{{ i.content|truncatewords:20 }} - выводим 20 слов

- linebreaks - помогает отобразить абзацы в тексте, применяется так:
{{ i.content|linebreaks|truncatewords:20 }}

- Если нам нужно применить все html теги в тексте, то добавляем  функцию autoescape через шаблонизатор:

{% autoescape off %}
<p class="box_content">{{ i.content|linebreaks|truncatewords:20 }}</p>
{% endautoescape %}

--------------------------------------------
26. Если в общих настройках сайта установлен параметр DEBUG = False, то папка static со всеми стилями и картинками не
загрузится. В терминале можно прописать команду, тогда папка static прогрузится:
python manage.py runserver --insecure

--------------------------------------------
27. SIMPLE TAGS - создаем свои простые теги. Для этого нужно в нашем приложении создать новую папку templatetags, в ней
создаем файл __init__.py, он будет пустой. Далее создаем еще один файл, в котором будем прописывать всю логику новых
тегов - dogtags.py

- Производим импортирование:
from django import template
import dogs.views as views

- Создаем объект класса Library для регистрации новых тегов:
register = template.Library()

- Создаем функцию, которая опишет наш тег:
def get_categoties():
    return views.cats_db

- в файле dogs/views.py описываем новую коллекцию:
cats_db = [
    {'id': 1, 'name': 'Парода', },
    {'id': 2, 'name': 'Характеристики'},
    {'id': 3, 'name': 'Заводчики'},
]

- Навешиваем на функцию декоратор, чтобы зарегистрировать тег:

@register.simple_tag()
def get_categories():
    return views.cats_db

28. Мы можем использовать наш новый простой тег в базовом шаблоне. Для этого загружаем файл в шаблон:
{% load dogtags %}

- И прописываем тег там, где мы хотим, чтобы он отображался:
{% get_categories %} - он отобразится коллекцией

29ю. Тег - {% get_categories %} - нельзя перебрать через цикл for, потому что это тег, поэтому мы можем поместить это
все во временную переменную:

{% get_categories as categories %}

- Теперь мы можем применить наш цикл for в шаблонизаторе:

<ul>
    {% get_categories as categories %}
    {% for cat in categories %}
        <li><a href="#">{{ cat.name }}</a></li>
    {% endfor %}
</ul>

- В файле dogs/urls.py прописываем новый путь:
path('category/<int:cat_id>/', views.show_category, name='category'),

- в файле dogs/views.py прописываем простую функцию:
def show_category(request, cat_id):
    return index(request)

- в файле с главным шаблоном меняем ссылку на страницы при нажатии на пункты меню:
<li><a href="{% url 'category' cat.id %}">{{ cat.name }}</a></li>